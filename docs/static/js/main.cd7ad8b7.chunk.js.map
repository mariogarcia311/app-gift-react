{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAY5C,OACI,sBAAMC,SARS,SAACC,GAChBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAO,IAC7BR,GAAc,SAAAS,GAAI,OAAGP,GAAH,mBAAkBO,OAChCN,EAAc,MAIlB,SAEI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAhBY,SAACP,GACrBF,EAAcE,EAAEQ,OAAOF,a,+BCJlBG,EAAO,uCAAC,WAAMC,GAAN,uBAAAC,EAAA,6DACXC,EADW,iDACmCC,UAAUH,GAD7C,+DAECI,MAAMF,GAFP,cAEXG,EAFW,gBAGGA,EAAKC,OAHR,uBAGVC,EAHU,EAGVA,KAEDC,EAAKD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACrB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QATxB,kBAYVM,GAZU,4CAAD,sDCAPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACpC,OACI,sBAAKc,UAAU,8DAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCDHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAK,GACLa,SAAQ,IAH0B,mBAC/BC,EAD+B,KACxBC,EADwB,KAiBtC,OAZAC,qBAAU,WACNxB,EAAQC,GACPwB,MAAK,SAAAC,GACFC,YAAW,WACPJ,EAAS,CACLf,KAAKkB,EACLL,SAAQ,MAEb,QAGT,CAACpB,IACIqB,EDbsBM,CAAa3B,GAA9Ba,EAHuB,EAG5BN,KAAaa,EAHe,EAGfA,QAKpB,OACI,qCACA,oBAAIJ,UAAU,yCAAd,SAAwDhB,IACvDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBACZ,qBAAKA,UAAU,YAAf,SAIQH,EAAOJ,KACH,SAAAC,GAAG,OACC,cAAC,EAAD,eAEIA,GADCA,EAAIC,aEOlBiB,EA1BI,WAAI,MAEiB1C,mBAAS,CAAC,cAF3B,mBAEZ2C,EAFY,KAEA5C,EAFA,KAMnB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ4C,EAAWpB,KAAI,SAACT,GAAD,OACX,cAAE,EAAF,CAEAA,SAAUA,GADLA,Y,MCd7B8B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.cd7ad8b7.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handleInputChange=(e)=>{\r\n        setInputValue(e.target.value)\r\n    }\r\n    const handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        if (inputValue.trim().length>2){\r\n        setCategories(cats=>[inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n        \r\n            < input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\nAddCategory.propTypes={\r\n    setCategories: PropTypes.func.isRequired\r\n}","import React from 'react'\r\n\r\nexport const getGifs=async(category)=>{\r\n    const url=`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=FdGqahRYTLlmYshDZnkl0wrDv7E4sNdS`\r\n    const resp= await fetch(url);\r\n    const {data}= await resp.json();\r\n\r\n    const gifs=data.map(img=>{\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url:img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    return (\r\n        <div className='card animate__animated animate__fadeInUpBig animate__slower'>\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","// import React, { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    // const [images, setImages] = useState([])\r\n    const {data:images, loading}=useFetchGifs(category);\r\n\r\n\r\n    \r\n    // getGifs()\r\n    return (\r\n        <>\r\n        <h3 className=\"animate__animated animate__fadeInUpBig\">{category}</h3>\r\n        {loading && <p className=\"animate__animated animate__flash\">loading</p>}\r\n        <div className=\"card-grid\">\r\n            \r\n            \r\n            {\r\n                images.map(\r\n                    img=>(\r\n                        <GifGridItem \r\n                        key={img.id}\r\n                        {...img} \r\n                        />\r\n                    )\r\n                )\r\n            }\r\n            \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n    })\r\n    useEffect(()=>{\r\n        getGifs(category)\r\n        .then(imgs=>{\r\n            setTimeout(() => {\r\n                setState({\r\n                    data:imgs,\r\n                    loading:false,\r\n                });    \r\n            }, 0);\r\n            \r\n        });\r\n    },[category])\r\n    return state\r\n    \r\n}","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp=()=>{\r\n    // const categories=['One Punch','Samurai x', 'Dragon ball'];\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n    // const handleAdd=()=>{\r\n    //     setCategories([...categories,'Boruto']);\r\n    // }\r\n    return(\r\n        <> \r\n            <h2>GifExpertAPP</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr/>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map((category)=>(\r\n                        < GifGrid \r\n                        key={category}\r\n                        category={category} \r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>             \r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}